C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN .\Objects\modbus.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\modbus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\source;.\l
                    -ib) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus.lst) OBJECT(.\Objects\modbus.obj)

line level    source

   1          #include "modbus.h"
   2          #include "uart.h"
   3          #include "umath.h"
   4          #include "timer.h"
   5          #include "debug.h"
   6          #include <STRING.H>
   7          #include "const.h"
   8          #include "data.h"
   9          #include "ui.h"
  10          #include "alarm.h"
  11          
  12          MMODBUS pageModbusReg[PAGE_MAX_NUM] = {0};
  13          u8 modbusNum, modbusTreatID; // modbusTreatID,ÓÃÀ´Ö¸Ê¾µ±Ç°ÕýÔÚ´¦ÀíÄÄÒ»Ìõ£¬modbusNum±íÊ¾µ±Ç°»º´æÇøÖÐÒ»¹²ÓÐ¶
             -àÉÙÌõ
  14          MMODBUS *emergencyTreat[EMERTENCY_NUM];
  15          u8 emergencyTail, emergencyHead;
  16          static MMODBUS *pNowOrder;
  17          static u8 ModbusBusy; // Ö¸Ê¾ÊÇ·ñÓÐMODBUSÃüÁîÕýÔÚ·¢ËÍ
  18          
  19          uint8_t synthesisCollection_Comm_Sta;
  20          uint8_t DC_Insulation_Comm_Sta[DC_INSULATION_MAX];
  21          uint8_t switchModule_Comm_Sta[SWITCH_MODULE_MAX];
  22          uint8_t battery_Comm_Sta[5];
  23          uint8_t dc_4850_Module_Comm_Sta[DC4850MODULE_MAX];
  24          uint8_t remoteControlModule_Comm_Sta[REMOTE_CONTROL_MODULE_MAX];
  25          uint8_t chargeModule_Comm_Sta[CHARGER_MODULE_MAX];
  26          uint8_t ups_Comm_Sta[UPS_MAX];
  27          uint8_t inv_Comm_Sta[INV_MAX];
  28          uint8_t AC_Insulation_Comm_Sta;
  29          
  30          u8 isEmergencyFull(void) // ÓÃÓÚ¼ì²é½ô¼±´¦ÀíÊÇ·ñÊÇÂúµÄ£¬ÂúµÄ²»ÄÜÔÙ´Î×°ÌîÊý¾Ý£¬ÒÔÃâÔì³É´íÂÒ
  31          {
  32   1              u8 tmp;
  33   1      
  34   1              tmp = emergencyHead + 1;
  35   1              if (tmp >= EMERTENCY_NUM)
  36   1                      tmp = 0;
  37   1              if (tmp == emergencyTail)
  38   1                      return 1;
  39   1              else
  40   1                      return 0;
  41   1      }
  42          
  43          u8 isEmergencyEmpty(void)
  44          {
  45   1              if (emergencyHead == emergencyTail)
  46   1                      return 1;
  47   1              else
  48   1                      return 0;
  49   1      }
  50          
  51          void clrEmergency(void)
  52          {
  53   1              emergencyHead = emergencyTail = 0;
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 2   

  54   1      }
  55          
  56          void pushToEmergency(MMODBUS *modbusOrder) // ÓÃÓÚ¼ÓÔØÒ»¸ö½á¹¹°üÖ¸Õëµ½Êý×éÖÐ
  57          {
  58   1              if (isEmergencyFull())
  59   1                      return;
  60   1              emergencyTreat[emergencyHead] = modbusOrder;
  61   1              emergencyHead++;
  62   1              if (emergencyHead >= EMERTENCY_NUM)
  63   1                      emergencyHead = 0;
  64   1      }
  65          
  66          MMODBUS *popFromEmergency(void)
  67          {
  68   1              u8 tmp;
  69   1      
  70   1              if (isEmergencyEmpty())
  71   1                      return NULL;
  72   1              else
  73   1              {
  74   2                      tmp = emergencyTail;
  75   2                      emergencyTail++;
  76   2                      if (emergencyTail >= EMERTENCY_NUM)
  77   2                              emergencyTail = 0;
  78   2                      return emergencyTreat[tmp];
  79   2              }
  80   1      }
  81          
  82          
  83          uint16_t slaveID[2];//2×Ö³¤ÓÃÓÚflash´æ´¢
  84          void Uart485RxTreat(void)
  85          {
  86   1              u16 len, len1, i;
  87   1              u8 tmp[512];
  88   1              u16 headtmp;
  89   1      
  90   1              if (Uart_Struct[UART485RX].rx_tail != Uart_Struct[UART485RX].rx_head)
  91   1              {
  92   2                      if (Uart_Struct[UART485RX].rx_buf[Uart_Struct[UART485RX].rx_tail] == slaveID[0])
  93   2                      {
  94   3                              EA = 0;
  95   3                              headtmp = Uart_Struct[UART485RX].rx_head;
  96   3                              EA = 1;
  97   3                              if (headtmp < Uart_Struct[UART485RX].rx_tail)
  98   3                              {
  99   4                                      len = (headtmp + SERIAL_SIZE) - Uart_Struct[UART485RX].rx_tail;
 100   4                              }
 101   3                              else
 102   3                              {
 103   4                                      len = headtmp - Uart_Struct[UART485RX].rx_tail;
 104   4                              }
 105   3                              if (len >= START_TREAT_LENGTH)
 106   3                              {
 107   4                                      if (Uart_Struct[UART485RX].rx_buf[(Uart_Struct[UART485RX].rx_tail + 1) & SERIAL_COUNT] == READ_REGISTE
             -R)
 108   4                                      {
 109   5                                              if (len >= 8)
 110   5                                              {
 111   6                                                      for (i = 0; i < 8; i++)
 112   6                                                      {
 113   7                                                              tmp[i] = Uart_Struct[UART485RX].rx_buf[Uart_Struct[UART485RX].rx_tail];
 114   7                                                              Uart_Struct[UART485RX].rx_tail++;
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 3   

 115   7                                                              Uart_Struct[UART485RX].rx_tail &= SERIAL_COUNT;
 116   7                                                      }
 117   6                                                      if (Calculate_CRC16(tmp, 8, 0) == 0)
 118   6                                                      {
 119   7                                                              uint16_t addr = *(uint16_t *)(tmp + 2);
 120   7                                                              tmp[2] = *(uint16_t *)(tmp + 4) * 2;
 121   7                                                              read_dgus_vp(addr, tmp + 3, tmp[2] / 2);
 122   7                                                              Calculate_CRC16(tmp, tmp[2] + 3, 1);
 123   7                                                              Uart_Send_Data(UART485RX, tmp[2] + 5, tmp);
 124   7                                                      }
 125   6                                              }
 126   5                                      }
 127   4                                      else if (Uart_Struct[UART485RX].rx_buf[(Uart_Struct[UART485RX].rx_tail + 1) & SERIAL_COUNT] == WRITE_R
             -EGISTER)
 128   4                                      {
 129   5                                              len1 = Uart_Struct[UART485RX].rx_buf[(Uart_Struct[UART485RX].rx_tail + 6) & SERIAL_COUNT] + 9;
 130   5                                              if (len >= len1)
 131   5                                              {
 132   6                                                      for (i = 0; i < len1; i++)
 133   6                                                      {
 134   7                                                              tmp[i] = Uart_Struct[UART485RX].rx_buf[Uart_Struct[UART485RX].rx_tail];
 135   7                                                              Uart_Struct[UART485RX].rx_tail++;
 136   7                                                              Uart_Struct[UART485RX].rx_tail &= SERIAL_COUNT;
 137   7                                                      }
 138   6                                                      if (Calculate_CRC16(tmp, len1, 0) == 0)
 139   6                                                      {
 140   7                                                              if (*(uint16_t *)(tmp + 2) >= 0x1000)
 141   7                                                              {
 142   8                                                                      write_dgus_vp(*(uint16_t *)(tmp + 2), (uint8_t *)(tmp + 7), *(uint16_t *)(tmp + 4));
 143   8                                                                      Calculate_CRC16(tmp, 6, 1);
 144   8                                                                      Uart_Send_Data(UART485RX, 8, tmp);
 145   8                                                              }
 146   7                                                      }
 147   6                                              }
 148   5                                      }
 149   4                                      else
 150   4                                      {
 151   5                                              Uart_Struct[UART485RX].rx_tail++;
 152   5                                              Uart_Struct[UART485RX].rx_tail &= SERIAL_COUNT;
 153   5                                      }
 154   4                              }
 155   3                      }
 156   2                      else
 157   2                      {
 158   3                              Uart_Struct[UART485RX].rx_tail++;
 159   3                              Uart_Struct[UART485RX].rx_tail &= SERIAL_COUNT;
 160   3                      }
 161   2              }
 162   1      }
 163          
 164          #if 0 // ÆÁÄ»×ö´Ó»ú
              void Uart485RxTreat(void)
              {
                      u16 len,len1,i;
                      u8 tmp[512];
                      u16 headtmp;
              
                      if(Uart_Struct[UART485].rx_tail != Uart_Struct[UART485].rx_head)
                      {
                              if(Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail]==0)
                              {
                                      EA = 0;
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 4   

                                      headtmp = Uart_Struct[UART485].rx_head;
                                      EA = 1;
                          if(headtmp < Uart_Struct[UART485].rx_tail)
                          {
                              len = (headtmp+SERIAL_SIZE) - Uart_Struct[UART485].rx_tail;
                          }
                          else
                          {
                              len = headtmp - Uart_Struct[UART485].rx_tail;
                          }
                                      if(len >= START_TREAT_LENGTH)
                                      {
                                              if(Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail+1)&SERIAL_COUNT] == READ_REGISTER)
                                              {
                                                      if(len>=8)
                                                      {
                                                              for(i=0;i<8;i++)
                                                              {
                                                                      tmp[i] = Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail];
                                                                      Uart_Struct[UART485].rx_tail++;
                                                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
                                                              }
                                                              if(Calculate_CRC16(tmp,8)==0)
                                                              {
                                                                      
                                                              }
                                                      }
                                              }
                                              else if(Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail+1)&SERIAL_COUNT] == WRITE_REGISTER)
                                              {
                                                      len1 = Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail+6)&SERIAL_COUNT]+9;
                                                      if(len >= len1)
                                                      {
                                                              for(i=0;i<len1;i++)
                                                              {
                                                                      tmp[i] = Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail];
                                                                      Uart_Struct[UART485].rx_tail++;
                                                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
                                                              }
                                                              if(Calculate_CRC16(tmp,len1)==0)
                                                              {
                                                                              Calculate_CRC16(tmp,6);
                                                                              Uatr_Send_Data(UART485,8,tmp);
                                                              }
                                                      }
                                              }
                                              else
                                              {
                                                      Uart_Struct[UART485].rx_tail++;
                                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
                                              }
                                      }
                              }
                              else
                              {
                                      Uart_Struct[UART485].rx_tail++;
                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
                              }
                      }
              }
              #else // ÆÁÄ»×öÖ÷»ú
 237          void modbusRxTreat(void)
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 5   

 238          {
 239   1              u16 len, len1, i, lentmp;
 240   1              u8 tmp[512];
 241   1              u16 headtmp;
 242   1              u8 tmp8;
 243   1      
 244   1              EA = 0;
 245   1              headtmp = Uart_Struct[UART485].rx_head;
 246   1              EA = 1;
 247   1              if (Uart_Struct[UART485].rx_tail != headtmp)
 248   1              {
 249   2                      if (Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail] == pNowOrder->SlaveAddr) // ²éÕÒµ±Ç°ÕýÔÚ·¢
             -ËÍÃüÁîµÄmodbusµØÖ·
 250   2                      {
 251   3                              if (headtmp < Uart_Struct[UART485].rx_tail)
 252   3                              {
 253   4                                      len = (headtmp + SERIAL_SIZE) - Uart_Struct[UART485].rx_tail;
 254   4                              }
 255   3                              else
 256   3                              {
 257   4                                      len = headtmp - Uart_Struct[UART485].rx_tail;
 258   4                              }
 259   3                              if (len >= START_TREAT_LENGTH) // »º´æµ½Ò»¶¨³¤¶Èºó²Å¿ªÊ¼´¦ÀíÊý¾Ý
 260   3                              {
 261   4                                      if (Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail + 1) & SERIAL_COUNT] == pNowOrder->Order
             -) // ²éÕÒµ½ÁËµØÖ·£¬²¢ÇÒºóÃæÊÇÏìÓ¦µÄÖ¸Áî
 262   4                                      {
 263   5                                              if (pNowOrder->Order == 0x01 || pNowOrder->Order == 0x02)
 264   5                                              {
 265   6                                                      len1 = Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail + 2) & SERIAL_COUNT];
 266   6                                                      lentmp = pNowOrder->Length / 8;
 267   6                                                      if ((pNowOrder->Length % 8) != 0)
 268   6                                                              lentmp++;
 269   6                                                      if (len1 == lentmp)
 270   6                                                      {
 271   7                                                              if (len >= len1 + 5)
 272   7                                                              {
 273   8                                                                      for (i = 0; i < len1 + 5; i++)
 274   8                                                                      {
 275   9                                                                              tmp[i] = Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail];
 276   9                                                                              Uart_Struct[UART485].rx_tail++;
 277   9                                                                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
 278   9                                                                      }
 279   8                                                                      if (Calculate_CRC16(tmp, len1 + 5, 0) == 0) // Ð£ÑéÕýÈ·
 280   8                                                                      {
 281   9                                                                              ModbusBusy = 0; // ±êÖ¾Î»±ä³É¿ÕÏÐ£¬¿ÉÒÔ¼ÌÐø·¢ËÍÏÂÒ»°üÊý¾Ý
 282   9                                                                              for (i = 0; i < pNowOrder->Length; i++)
 283   9                                                                              {
 284  10                                                                                      tmp8 = 0x01 << (i % 8);
 285  10                                                                                      if (tmp[3 + i / 8] & tmp8)
 286  10                                                                                              headtmp = 1;
 287  10                                                                                      else
 288  10                                                                                              headtmp = 0;
 289  10                                                                                      write_dgus_vp(pNowOrder->VPaddr + i, (u8 *)&headtmp, 1);
 290  10                                                                              }
 291   9                                                                              if (pNowOrder->databuff != NULL)
 292   9                                                                              {
 293  10                                                                                      memcpy(pNowOrder->databuff, tmp + 3, tmp[2]);
 294  10                                                                              }
 295   9                                                                      }
 296   8                                                              }
 297   7                                                      }
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 6   

 298   6                                                      else
 299   6                                                      {
 300   7                                                              Uart_Struct[UART485].rx_tail++;
 301   7                                                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT; // ¼ÌÐøËÑË÷
 302   7                                                      }
 303   6                                              }
 304   5                                              else if (0x03 == pNowOrder->Order)
 305   5                                              {
 306   6                                                      len1 = Uart_Struct[UART485].rx_buf[(Uart_Struct[UART485].rx_tail + 2) & SERIAL_COUNT];
 307   6                                                      lentmp = pNowOrder->Length << 1;
 308   6                                                      if (len1 == lentmp)
 309   6                                                      {
 310   7                                                              if (len >= len1 + 5)
 311   7                                                              {
 312   8                                                                      for (i = 0; i < len1 + 5; i++)
 313   8                                                                      {
 314   9                                                                              tmp[i] = Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail];
 315   9                                                                              Uart_Struct[UART485].rx_tail++;
 316   9                                                                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
 317   9                                                                      }
 318   8                                                                      if (Calculate_CRC16(tmp, len1 + 5, 0) == 0) // Ð£ÑéÕýÈ·
 319   8                                                                      {
 320   9                                                                              ModbusBusy = 0; // ±êÖ¾Î»±ä³É¿ÕÏÐ£¬¿ÉÒÔ¼ÌÐø·¢ËÍÏÂÒ»°üÊý¾Ý
 321   9                                                                              if (pNowOrder->VPaddr != 0)
 322   9                                                                              {
 323  10                                                                                      write_dgus_vp(pNowOrder->VPaddr, &tmp[3], pNowOrder->Length);
 324  10                                                                              }
 325   9                                                                              if (pNowOrder->databuff != NULL)
 326   9                                                                              {
 327  10                                                                                      memcpy(pNowOrder->databuff, tmp + 3, tmp[2]);
 328  10                                                                              }
 329   9      
 330   9                                                                              {
 331  10                                                                                      uint16_t i;
 332  10                                                                                      if (pNowOrder->SlaveAddr == 0x61)
 333  10                                                                                      {
 334  11                                                                                              synthesisCollection_Comm_Sta = 1;
 335  11                                                                                      }
 336  10                                                                                      if (pNowOrder->SlaveAddr == 0x60)
 337  10                                                                                      {
 338  11                                                                                              DC_Insulation_Comm_Sta[0] = 1;
 339  11                                                                                      }
 340  10                                                                                      if (pNowOrder->SlaveAddr == 0x62)
 341  10                                                                                      {
 342  11                                                                                              DC_Insulation_Comm_Sta[1] = 1;
 343  11                                                                                      }
 344  10                                                                                      for (i = 0; i < SWITCH_MODULE_MAX; i++)
 345  10                                                                                      {
 346  11                                                                                              if (pNowOrder->SlaveAddr == 0xA0 + i)
 347  11                                                                                              {
 348  12                                                                                                      switchModule_Comm_Sta[i] = 1;
 349  12                                                                                              }
 350  11                                                                                      }
 351  10                                                                                      for (i = 0; i < SWITCH_MODULE_MAX; i++)
 352  10                                                                                      {
 353  11                                                                                              if (pNowOrder->SlaveAddr == 0x70 + i)
 354  11                                                                                              {
 355  12                                                                                                      battery_Comm_Sta[i] = 1;
 356  12                                                                                              }
 357  11                                                                                      }
 358  10                                                                                      for (i = 0; i < DC4850MODULE_MAX; i++)
 359  10                                                                                      {
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 7   

 360  11                                                                                              if (pNowOrder->SlaveAddr == 0x90 + i)
 361  11                                                                                              {
 362  12                                                                                                      dc_4850_Module_Comm_Sta[i] = 1;
 363  12                                                                                              }
 364  11                                                                                      }
 365  10                                                                                      for (i = 0; i < CHARGER_MODULE_MAX; i++)
 366  10                                                                                      {
 367  11                                                                                              if (pNowOrder->SlaveAddr == 0x01 + i)
 368  11                                                                                              {
 369  12                                                                                                      chargeModule_Comm_Sta[i] = 1;
 370  12                                                                                              }
 371  11                                                                                      }
 372  10                                                                                      for (i = 0; i < UPS_MAX; i++)
 373  10                                                                                      {
 374  11                                                                                              if (pNowOrder->SlaveAddr == 26 + i)
 375  11                                                                                              {
 376  12                                                                                                      ups_Comm_Sta[i] = 1;
 377  12                                                                                              }
 378  11                                                                                      }
 379  10                                                                                      for (i = 0; i < INV_MAX; i++)
 380  10                                                                                      {
 381  11                                                                                              if (pNowOrder->SlaveAddr == 0x80 + i)
 382  11                                                                                              {
 383  12                                                                                                      inv_Comm_Sta[i] = 1;
 384  12                                                                                              }
 385  11                                                                                      }
 386  10                                                                                      if (pNowOrder->SlaveAddr == 0x32)
 387  10                                                                                      {
 388  11                                                                                              alarmTabFlag[AC_FAULT] = 1;
 389  11                                                                                      }
 390  10                                                                              }
 391   9                                                                      }
 392   8                                                              }
 393   7                                                      }
 394   6                                                      else
 395   6                                                      {
 396   7                                                              Uart_Struct[UART485].rx_tail++;
 397   7                                                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT; // ¼ÌÐøËÑË÷
 398   7                                                      }
 399   6                                              }
 400   5                                              else if ((0x05 == pNowOrder->Order) || (0x06 == pNowOrder->Order) || (0x10 == pNowOrder->Order))
 401   5                                              {
 402   6                                                      if (len >= 8)
 403   6                                                      {
 404   7                                                              for (i = 0; i < 8; i++)
 405   7                                                              {
 406   8                                                                      tmp[i] = Uart_Struct[UART485].rx_buf[Uart_Struct[UART485].rx_tail];
 407   8                                                                      Uart_Struct[UART485].rx_tail++;
 408   8                                                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT;
 409   8                                                              }
 410   7                                                              if (Calculate_CRC16(tmp, 8, 0) == 0) // Ð£ÑéÕýÈ·
 411   7                                                              {
 412   8                                                                      if (*(u16 *)&tmp[2] == pNowOrder->ModbusReg)
 413   8                                                                      {
 414   9                                                                              ModbusBusy = 0; // ±êÖ¾Î»±ä³É¿ÕÏÐ£¬¿ÉÒÔ¼ÌÐø·¢ËÍÏÂÒ»°üÊý¾Ý
 415   9                                                                      }
 416   8                                                              }
 417   7                                                      }
 418   6                                              }
 419   5                                              else
 420   5                                              {
 421   6                                                      Uart_Struct[UART485].rx_tail++;
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 8   

 422   6                                                      Uart_Struct[UART485].rx_tail &= SERIAL_COUNT; // ¼ÌÐøËÑË÷
 423   6                                              }
 424   5                                      }
 425   4                                      else
 426   4                                      {
 427   5                                              Uart_Struct[UART485].rx_tail++;
 428   5                                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT; // ¼ÌÐøËÑË÷
 429   5                                      }
 430   4                              }
 431   3                      }
 432   2                      else
 433   2                      {
 434   3                              Uart_Struct[UART485].rx_tail++;
 435   3                              Uart_Struct[UART485].rx_tail &= SERIAL_COUNT; // ¼ÌÐøËÑË÷
 436   3                      }
 437   2              }
 438   1      }
 439          
 440          #endif
 441          
 442          u8 AnalysisMosbusOrder(u8 *pBuf) // ¸ù¾Ýµ±Ç°Ö¸ÁîµÄ¸ñÊ½½«Òª·¢ËÍµÄÊý¾Ý·Åµ½PbufÀïÃæ£¬²¢·µ»Ø·¢ËÍ³¤¶È
 443          {
 444   1              u8 len;
 445   1              u8 tmp[4];
 446   1      
 447   1              if (pNowOrder->mode == 0)
 448   1              {
 449   2              }
 450   1              else if (pNowOrder->mode == 1)
 451   1              {
 452   2                      if (pNowOrder->flag == 0x5a)
 453   2                      {
 454   3                              pNowOrder->flag = 0x00;
 455   3                      }
 456   2                      else
 457   2                      {
 458   3                              return 0;
 459   3                      }
 460   2              }
 461   1              else
 462   1              {
 463   2                      return 0;
 464   2              }
 465   1              len = 0;
 466   1              switch (pNowOrder->Order)
 467   1              {
 468   2              case 0x01: // ¶ÁÎ»×´Ì¬¼Ä´æÆ÷
 469   2                      if (pNowOrder->Length)
 470   2                      {
 471   3                              pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 472   3                              pBuf[1] = 0x01;                                 // ¹¦ÄÜÂë
 473   3                              pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 474   3                              pBuf[3] = (u8)(pNowOrder->ModbusReg); // Î»¼Ä´æÆ÷ÆðÊ¼µØÖ·
 475   3                              pBuf[4] = 0;
 476   3                              pBuf[5] = pNowOrder->Length; // Î»¼Ä´æÆ÷³¤¶È£¬×î´óÖ§³Ö255
 477   3                              len = 6;
 478   3                      }
 479   2                      else
 480   2                      {
 481   3                              len = 0;
 482   3                      }
 483   2                      break;
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 9   

 484   2              case 0x02: // ¶ÁÎ»×´Ì¬¼Ä´æÆ÷
 485   2                      if (pNowOrder->Length)
 486   2                      {
 487   3                              pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 488   3                              pBuf[1] = 0x02;                                 // ¹¦ÄÜÂë
 489   3                              pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 490   3                              pBuf[3] = (u8)(pNowOrder->ModbusReg); // Î»¼Ä´æÆ÷ÆðÊ¼µØÖ·
 491   3                              pBuf[4] = 0;
 492   3                              pBuf[5] = pNowOrder->Length; // Î»¼Ä´æÆ÷³¤¶È£¬×î´óÖ§³Ö255
 493   3                              len = 6;
 494   3                      }
 495   2                      else
 496   2                      {
 497   3                              len = 0;
 498   3                      }
 499   2                      break;
 500   2              case 0x03: // ¶Á±£³Ö¼Ä´æÆ÷
 501   2                      if (pNowOrder->Length)
 502   2                      {
 503   3                              pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 504   3                              pBuf[1] = 0x03;                                 // ¹¦ÄÜÂë
 505   3                              pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 506   3                              pBuf[3] = (u8)(pNowOrder->ModbusReg); // ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 507   3                              pBuf[4] = 0;
 508   3                              pBuf[5] = pNowOrder->Length; // Î»¼Ä´æÆ÷³¤¶È£¬×î´óÖ§³Ö255
 509   3                              len = 6;
 510   3                      }
 511   2                      else
 512   2                      {
 513   3                              len = 0;
 514   3                      }
 515   2                      break;
 516   2              case 0x05:                                                      // Ð´µ¥¸öÎ»¼Ä´æÆ÷
 517   2                      pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 518   2                      pBuf[1] = 0x05;                                 // ¹¦ÄÜÂë
 519   2                      pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 520   2                      pBuf[3] = (u8)(pNowOrder->ModbusReg); // Î»¼Ä´æÆ÷ÆðÊ¼µØÖ·
 521   2                      if (pNowOrder->databuff != NULL)
 522   2                      {
 523   3                              memcpy(tmp, (uint8_t *)pNowOrder->databuff, 2);
 524   3                      }
 525   2                      else if (pNowOrder->VPaddr != 0)
 526   2                      {
 527   3                              read_dgus_vp(pNowOrder->VPaddr, tmp, 1);
 528   3                      }
 529   2                      if (tmp[1])
 530   2                              pBuf[4] = 0xff; // Î»×ªÌ¬ÎªON
 531   2                      else
 532   2                              pBuf[4] = 0; // Î»×´Ì¬ÎªOFF
 533   2                      pBuf[5] = 0x00;
 534   2                      len = 6;
 535   2                      break;
 536   2              case 0x06:                                                      // Ð´µ¥¸ö¼Ä´æÆ÷
 537   2                      pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 538   2                      pBuf[1] = 0x06;                                 // ¹¦ÄÜÂë
 539   2                      pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 540   2                      pBuf[3] = (u8)(pNowOrder->ModbusReg); // ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 541   2                      if (pNowOrder->databuff != NULL)
 542   2                      {
 543   3                              memcpy(&pBuf[4], (uint8_t *)pNowOrder->databuff, 2);
 544   3                      }
 545   2                      else if (pNowOrder->VPaddr != 0)
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 10  

 546   2                      {
 547   3                              read_dgus_vp(pNowOrder->VPaddr, &pBuf[4], 1);
 548   3                      }
 549   2                      len = 6;
 550   2                      break;
 551   2              case 0x10: // Ð´¶à¸ö¼Ä´æÆ÷
 552   2                      if ((pNowOrder->Length > 0) && (pNowOrder->Length < 0x7b))
 553   2                      {
 554   3                              pBuf[0] = pNowOrder->SlaveAddr; // ´Ó»úµØÖ·
 555   3                              pBuf[1] = 0x10;                                 // ¹¦ÄÜÂë
 556   3                              pBuf[2] = (u8)(pNowOrder->ModbusReg >> 8);
 557   3                              pBuf[3] = (u8)(pNowOrder->ModbusReg); // ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 558   3                              pBuf[4] = 0;
 559   3                              pBuf[5] = pNowOrder->Length;      // Î»¼Ä´æÆ÷³¤¶È£¬×î´óÖ§³Ö0x7b
 560   3                              pBuf[6] = pNowOrder->Length << 1; // Ð´Èë¼Ä´æÆ÷×Ö½ÚÊý
 561   3                              len = pBuf[6] + 7;
 562   3                              if (pNowOrder->databuff != NULL)
 563   3                              {
 564   4                                      memcpy(&pBuf[7], (uint8_t *)pNowOrder->databuff, pNowOrder->Length * 2);
 565   4                              }
 566   3                              else if (pNowOrder->VPaddr != 0)
 567   3                              {
 568   4                                      read_dgus_vp(pNowOrder->VPaddr, &pBuf[7], pNowOrder->Length); // Êµ¼ÊÊý¾Ý
 569   4                              }
 570   3                      }
 571   2                      else
 572   2                      {
 573   3                              len = 0;
 574   3                      }
 575   2                      break;
 576   2              default:
 577   2                      break;
 578   2              }
 579   1              if (len)
 580   1              {
 581   2                      Calculate_CRC16(pBuf, len, 1);
 582   2                      return len + 2; // ·µ»Ø·¢ËÍ³¤¶È+2×Ö½ÚCRC
 583   2              }
 584   1              return 0; // 0±íÊ¾±¾ÌõÖ¸ÁîÎÞÐ§
 585   1      }
 586          
 587          void modbusTxTreat(void)
 588          {
 589   1              u8 sendbuf[512];
 590   1              u8 len;
 591   1      
 592   1              if (ModbusBusy) // ÓÐÊý¾ÝÕýÔÚ´¦ÀíµÄÊ±ºò£¬²»´¦Àí·¢ËÍ
 593   1                      return;
 594   1              pNowOrder = popFromEmergency();
 595   1              if (pNowOrder != NULL)
 596   1              {
 597   2                      len = AnalysisMosbusOrder(sendbuf);
 598   2                      if (len)
 599   2                      {
 600   3                              ModbusBusy = 1;
 601   3                              Uart_Send_Data(UART485, len, sendbuf);
 602   3                              StartTimer(MODBUS_TIMER, pNowOrder->waitTime);
 603   3                      }
 604   2              }
 605   1              else
 606   1              {
 607   2                      if (modbusNum == 0) // µ±Ç°Ò³µÄ¼Ä´æÆ÷¸öÊýÎª0µÄÊ±ºò£¬²»´¦Àí·¢ËÍ
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 11  

 608   2                      {
 609   3                              modbusTreatID = 0;
 610   3                              return;
 611   3                      }
 612   2                      pNowOrder = &pageModbusReg[modbusTreatID];
 613   2                      modbusTreatID++;
 614   2                      if (modbusTreatID >= modbusNum)
 615   2                              modbusTreatID = 0;
 616   2                      len = AnalysisMosbusOrder(sendbuf);
 617   2                      if (len)
 618   2                      {
 619   3                              ModbusBusy = 1;
 620   3                              Uart_Send_Data(UART485, len, sendbuf);
 621   3                              StartTimer(MODBUS_TIMER, pNowOrder->waitTime);
 622   3                      }
 623   2              }
 624   1      }
 625          
 626          void modbusTreat(void)
 627          {
 628   1              if (ModbusBusy)
 629   1              {
 630   2                      if (GetTimeOutFlag(MODBUS_TIMER)) // ³¬Ê±ºó£¬Ç¿ÖÆ´¦ÀíÏÂÒ»°ü
 631   2                      {
 632   3                              ModbusBusy = 0;
 633   3                              EA = 0;
 634   3                              Uart_Struct[UART485].rx_tail = Uart_Struct[UART485].rx_head;
 635   3                              {
 636   4                                      uint16_t i;
 637   4                                      if (pNowOrder->SlaveAddr == 0x61)
 638   4                                      {
 639   5                                              synthesisCollection_Comm_Sta = 0;
 640   5                                      }
 641   4                                      if (pNowOrder->SlaveAddr == 0x60)
 642   4                                      {
 643   5                                              DC_Insulation_Comm_Sta[0] = 0;
 644   5                                      }
 645   4                                      if (pNowOrder->SlaveAddr == 0x62)
 646   4                                      {
 647   5                                              DC_Insulation_Comm_Sta[1] = 0;
 648   5                                      }
 649   4                                      for (i = 0; i < SWITCH_MODULE_MAX; i++)
 650   4                                      {
 651   5                                              if (pNowOrder->SlaveAddr == 0xA0 + i)
 652   5                                              {
 653   6                                                      switchModule_Comm_Sta[i] = 0;
 654   6                                              }
 655   5                                      }
 656   4                                      for (i = 0; i < SWITCH_MODULE_MAX; i++)
 657   4                                      {
 658   5                                              if (pNowOrder->SlaveAddr == 0x70 + i)
 659   5                                              {
 660   6                                                      battery_Comm_Sta[i] = 0;
 661   6                                              }
 662   5                                      }
 663   4                                      for (i = 0; i < DC4850MODULE_MAX; i++)
 664   4                                      {
 665   5                                              if (pNowOrder->SlaveAddr == 0x90 + i)
 666   5                                              {
 667   6                                                      dc_4850_Module_Comm_Sta[i] = 0;
 668   6                                              }
 669   5                                      }
C51 COMPILER V9.60.7.0   MODBUS                                                            05/11/2023 11:48:33 PAGE 12  

 670   4                                      for (i = 0; i < CHARGER_MODULE_MAX; i++)
 671   4                                      {
 672   5                                              if (pNowOrder->SlaveAddr == 0x01 + i)
 673   5                                              {
 674   6                                                      chargeModule_Comm_Sta[i] = 0;
 675   6                                              }
 676   5                                      }
 677   4                                      for (i = 0; i < UPS_MAX; i++)
 678   4                                      {
 679   5                                              if (pNowOrder->SlaveAddr == 26 + i)
 680   5                                              {
 681   6                                                      ups_Comm_Sta[i] = 0;
 682   6                                              }
 683   5                                      }
 684   4                                      for (i = 0; i < INV_MAX; i++)
 685   4                                      {
 686   5                                              if (pNowOrder->SlaveAddr == 0x80 + i)
 687   5                                              {
 688   6                                                      inv_Comm_Sta[i] = 0;
 689   6                                              }
 690   5                                      }
 691   4                                      if (pNowOrder->SlaveAddr == 0x32)
 692   4                                      {
 693   5                                              alarmTabFlag[AC_FAULT] = 0;
 694   5                                      }
 695   4                                      EA = 1;
 696   4                              }
 697   3                      }
 698   2              }
 699   1              modbusTxTreat();
 700   1              modbusRxTreat();
 701   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5032    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1051    1567
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
