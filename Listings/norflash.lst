C51 COMPILER V9.60.7.0   NORFLASH                                                          04/28/2023 11:33:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE NORFLASH
OBJECT MODULE PLACED IN .\Objects\norflash.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\norflash.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\source;.
                    -\lib) DEBUG OBJECTEXTEND PRINT(.\Listings\norflash.lst) OBJECT(.\Objects\norflash.obj)

line level    source

   1          #include "norflash.h"
   2          #include <string.h>
   3          #include "ui.h"
   4          #include "debug.h"
   5          #include "data.h"
   6          
   7          xdata u8 norflash_cmd[8];
   8          
   9          // 写入到norflash中
  10          // 向T5L内部自带的nor flash写入数据
  11          //  addr:nor flash的地址,必须为偶数,范围为:0x000000-0x027FFE,然后一个地址对应2个字节,即总容量为320KB
  12          //  buff:需要写入的缓冲区,长度至少大于len*2
  13          //  len:写入的字数,必须为偶数,而且写入的最大长度也有限制,这个跟CACHE_ADDR的值有关系
  14          void Nor_Flash_write(u32 addr, u8 *buff, u16 len)
  15          {
  16   1              write_dgus_vp(CACHE_ADDR, buff, len); // 将数据从缓冲区写到CACHE_ADDR中
  17   1              norflash_cmd[0] = NORFLASH_WRITE;         // 操作模式
  18   1      
  19   1              norflash_cmd[1] = (u8)(addr >> 16); // norflash地址
  20   1              norflash_cmd[2] = (u8)(addr >> 8);
  21   1              norflash_cmd[3] = (u8)addr;
  22   1      
  23   1              norflash_cmd[4] = (u8)(CACHE_ADDR >> 8); // dugs变量数据地址
  24   1              norflash_cmd[5] = (u8)CACHE_ADDR;
  25   1      
  26   1              norflash_cmd[6] = (u8)(len >> 8); // 读写字节长度
  27   1              norflash_cmd[7] = (u8)(len);
  28   1      
  29   1              write_dgus_vp(NORFLASH_ADDR, norflash_cmd, 4); // 写入系统变量接口地址0x0008中
  30   1              while (1)                                                                          // 等待清零
  31   1              {
  32   2                      read_dgus_vp(NORFLASH_ADDR, norflash_cmd, 2); // 读取操作模式位 0x5A=读 0xA5=写， CPU 操作完清零。
  33   2                      if (norflash_cmd[0] == 0)                                         // 清零
  34   2                      {
  35   3                              break;
  36   3                      }
  37   2                      delay_ms(1);
  38   2              }
  39   1      }
  40          // 从norflash中读取
  41          void Nor_Flash_read(u32 addr, u8 *buff, u16 len)
  42          {
  43   1              norflash_cmd[0] = NORFLASH_READ; // 操作模式
  44   1      
  45   1              norflash_cmd[1] = (u8)(addr >> 16); // norflash地址
  46   1              norflash_cmd[2] = (u8)(addr >> 8);
  47   1              norflash_cmd[3] = (u8)addr;
  48   1      
  49   1              norflash_cmd[4] = (u8)(CACHE_ADDR >> 8); // dugs变量数据地址
  50   1              norflash_cmd[5] = (u8)CACHE_ADDR;
  51   1      
  52   1              norflash_cmd[6] = (u8)(len >> 8); // 读写字节长度
  53   1              norflash_cmd[7] = (u8)(len);
  54   1      
C51 COMPILER V9.60.7.0   NORFLASH                                                          04/28/2023 11:33:25 PAGE 2   

  55   1              write_dgus_vp(NORFLASH_ADDR, norflash_cmd, 4);
  56   1              while (1)
  57   1              {
  58   2                      read_dgus_vp(NORFLASH_ADDR, norflash_cmd, 2);
  59   2                      if (norflash_cmd[0] == 0)
  60   2                      {
  61   3                              break;
  62   3                      }
  63   2                      delay_ms(1);
  64   2              }
  65   1              read_dgus_vp(CACHE_ADDR, buff, len); // 将数据从CACHE_ADDR中读到buff中
  66   1      }
  67          
  68          // 向T5L内部自带的nor flash写入数据
  69          //  addrForNorFlash:nor flash的地址,必须为偶数,范围为:0x000000-0x027FFE,然后一个地址对应2个字节,即总容量为
             -320KB
  70          //  addrInDgus:需要写入的Dgus VP缓冲区,长度至少大于len*2
  71          //  len:写入的字数,必须为偶数,而且写入的最大长度也有限制,这个跟CACHE_ADDR的值有关系
  72          void dgusToNorFlash(u32 addrForNorFlash, u16 addrInDgus, u16 len)
  73          {
  74   1              u8 norFlash_buff[8];
  75   1      
  76   1              norFlash_buff[0] = NORFLASH_WRITE;                                 // 写操作
  77   1              norFlash_buff[1] = (addrForNorFlash >> 16) & 0xff; // nor flash地址
  78   1              norFlash_buff[2] = (addrForNorFlash >> 8) & 0xff;
  79   1              norFlash_buff[3] = addrForNorFlash & 0xff;
  80   1              norFlash_buff[4] = (addrInDgus >> 8) & 0xff; // dgusii数据地址
  81   1              norFlash_buff[5] = addrInDgus & 0xff;
  82   1              norFlash_buff[6] = (len >> 8) & 0xff; // 写入的数据长度
  83   1              norFlash_buff[7] = len & 0xff;
  84   1              write_dgus_vp(NORFLASH_ADDR, norFlash_buff, 4);
  85   1      
  86   1              while (1)
  87   1              {
  88   2                      read_dgus_vp(NORFLASH_ADDR, norFlash_buff, 2); // 只需读取0x0008变量的前2个字,然后判断D7是否为0
  89   2                      if (norFlash_buff[0] == 0)
  90   2                              break;
  91   2                      delay_ms(1); // 这个延时必须加,可以防止莫名其妙的错误
  92   2              }
  93   1      }
  94          
  95          void norFlashToDgus(u32 addrForNorFlash, u16 addrInDgus, u16 len)
  96          {
  97   1              u8 norFlash_buff[8];
  98   1      
  99   1              norFlash_buff[0] = NORFLASH_READ;                                  // 写操作
 100   1              norFlash_buff[1] = (addrForNorFlash >> 16) & 0xff; // nor flash地址
 101   1              norFlash_buff[2] = (addrForNorFlash >> 8) & 0xff;
 102   1              norFlash_buff[3] = addrForNorFlash & 0xff;
 103   1              norFlash_buff[4] = (addrInDgus >> 8) & 0xff; // dgusii数据地址
 104   1              norFlash_buff[5] = addrInDgus & 0xff;
 105   1              norFlash_buff[6] = (len >> 8) & 0xff; // 写入的数据长度
 106   1              norFlash_buff[7] = len & 0xff;
 107   1              write_dgus_vp(NORFLASH_ADDR, norFlash_buff, 4);
 108   1      
 109   1              while (1)
 110   1              {
 111   2                      read_dgus_vp(NORFLASH_ADDR, norFlash_buff, 2); // 只需读取0x0008变量的前2个字,然后判断D7是否为0
 112   2                      if (norFlash_buff[0] == 0)
 113   2                              break;
 114   2                      delay_ms(1); // 这个延时必须加,可以防止莫名其妙的错误
 115   2              }
C51 COMPILER V9.60.7.0   NORFLASH                                                          04/28/2023 11:33:25 PAGE 3   

 116   1      }
 117          
 118          void sysParameterRead(void)
 119          {
 120   1              // DEBUGINFO("sysParameterRead");
 121   1              Nor_Flash_read(SYS_INFO_NORFLASH_ADDR, (uint8_t *)&sysInfoSet, SYS_INFO_SIZE);
 122   1              write_dgus_vp(SYS_INFO_VP, (uint8_t *)&sysInfoSet, SYS_INFO_SIZE);
 123   1      
 124   1              Nor_Flash_read(AC_INFO_NORFLASH_ADDR, (uint8_t *)&AC_InfoSet, AC_INFO_SIZE);
 125   1              write_dgus_vp(AC_INFO_VP, (uint8_t *)&AC_InfoSet, AC_INFO_SIZE);
 126   1      
 127   1              Nor_Flash_read(DC_INFO_NORFLASH_ADDR, (uint8_t *)&DC_InfoSet, DC_INFO_SIZE);
 128   1              write_dgus_vp(DC_INFO_VP, (uint8_t *)&DC_InfoSet, DC_INFO_SIZE);
 129   1      
 130   1              Nor_Flash_read(BATTERY_INFO_NORFLASH_ADDR, (uint8_t *)&batteryInfoSet, BATTERY_INFO_SIZE);
 131   1              write_dgus_vp(BATTERY_INFO_VP, (uint8_t *)&batteryInfoSet, BATTERY_INFO_SIZE);
 132   1      
 133   1              Nor_Flash_read(SPECIAL_PARA_NORFLASH_ADDR, (uint8_t *)&specialParaSet, SPECIAL_PARA_SIZE);
 134   1              write_dgus_vp(SPECIAL_PARA_VP, (uint8_t *)&specialParaSet, SPECIAL_PARA_SIZE);
 135   1      
 136   1              Nor_Flash_read(BACKLIGHT_TIME_NORFLASH_ADDR, (uint8_t *)&backLightTime, 2);
 137   1              if (backLightTime[0] < 3000)
 138   1              {
 139   2                      backLightTime[0] = 3000;
 140   2              }
 141   1              write_dgus_vp(BACKLIGHT_TIME_SET_VP, (uint8_t *)&backLightTime, 1);
 142   1              write_dgus_vp(0x83, (uint8_t *)&backLightTime, 1);
 143   1      
 144   1              // DEBUGINFO("BATTERY_SET_NORFLASH_ADDR");
 145   1              Nor_Flash_read(SWITCH_MODULE_NORFLASH_ADDR, (uint8_t *)&switchModuleSet, SWITCH_MODULE_SIZE);
 146   1              write_dgus_vp(SWITCH_MODULE_SET_VP, (uint8_t *)&switchModuleSet, SWITCH_MODULE_SIZE);
 147   1      
 148   1              Nor_Flash_read(BATTERY_SET_NORFLASH_ADDR, (uint8_t *)&batterySet, BATTERY_SET_SIZE);
 149   1              write_dgus_vp(BATTERY_SET_VP, (uint8_t *)&batterySet, BATTERY_SET_SIZE);
 150   1      
 151   1              Nor_Flash_read(INSULATION_SET_NORFLASH_ADDR, (uint8_t *)&insulationSet, INSULATION_SET_SIZE);
 152   1              write_dgus_vp(INSULATION_SET_VP, (uint8_t *)&insulationSet, INSULATION_SET_SIZE);
 153   1      
 154   1              Nor_Flash_read(CHARGE_MODULE_SET_NORFLASH_ADDR, (uint8_t *)&chargeModuleSet, CHARGE_MODULE_SET_SIZE);
 155   1              write_dgus_vp(CHARGE_MODULE_SET_VP, (uint8_t *)&chargeModuleSet, CHARGE_MODULE_SET_SIZE);
 156   1      
 157   1              Nor_Flash_read(DC_CONVERTER_SET_NORFLASH_ADDR, (uint8_t *)&DC_ConverterSet, DC_CONVERTER_SET_SIZE);
 158   1              write_dgus_vp(DC_CONVERTER_SET_VP, (uint8_t *)&DC_ConverterSet, DC_CONVERTER_SET_SIZE);
 159   1      
 160   1              Nor_Flash_read(UPS_INV_SET_NORFLASH_ADDR, (uint8_t *)&UPS_INV_Set, UPS_INV_SET_SIZE);
 161   1              write_dgus_vp(UPS_INV_SET_VP, (uint8_t *)&UPS_INV_Set, UPS_INV_SET_SIZE);
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1269    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8      50
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
